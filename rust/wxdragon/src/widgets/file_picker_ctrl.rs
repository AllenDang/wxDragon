/* This is a new file */
//! Safe wrapper for wxFilePickerCtrl.

use crate::base::{Point, Size};
use crate::event::WxEvtHandler;
// use crate::Frame; // Unused
// use crate::Window; // Will be used via crate::window::Window
use crate::window::Window; // Explicit import for embedding
use crate::WxWidget;
use std::ffi::{c_long, CString};
use std::ptr;
use wxdragon_sys as ffi;

// --- Constants for wxFilePickerCtrl --- 
// TODO: These should be generated by const_extractor and available via wxdragon_sys
// For now, define them manually based on wxWidgets documentation.
pub const FLP_DEFAULT_STYLE: i64 = ffi::WXD_FLP_DEFAULT_STYLE; // wxFLP_OPEN (typically)
pub const FLP_OPEN: i64 = ffi::WXD_FLP_OPEN;
pub const FLP_SAVE: i64 = ffi::WXD_FLP_SAVE;
pub const FLP_OVERWRITE_PROMPT: i64 = ffi::WXD_FLP_OVERWRITE_PROMPT;
pub const FLP_FILE_MUST_EXIST: i64 = ffi::WXD_FLP_FILE_MUST_EXIST;
pub const FLP_CHANGE_DIR: i64 = ffi::WXD_FLP_CHANGE_DIR;
pub const FLP_USE_TEXTCTRL: i64 = ffi::WXD_FLP_USE_TEXTCTRL; // For wxFLP_USE_TEXTCTRL, if needed later

// --- FilePickerCtrl --- 

#[derive(Clone)]
pub struct FilePickerCtrl {
    window: Window, // Embed Window
}

impl FilePickerCtrl {
    /// Creates a new FilePickerCtrlBuilder.
    pub fn builder<'a>(parent: &'a impl WxWidget) -> FilePickerCtrlBuilder<'a> {
        let mut builder = FilePickerCtrlBuilder::default();
        builder.parent_ptr = parent.handle_ptr();
        builder
    }

    /// Gets the currently selected path.
    pub fn get_path(&self) -> String {
        unsafe {
            let c_str = ffi::wxd_FilePickerCtrl_GetPath(self.window.as_ptr() as *mut ffi::wxd_FilePickerCtrl_t);
            if c_str.is_null() {
                String::new()
            } else {
                let rust_str = CString::from_raw(c_str as *mut _).to_string_lossy().into_owned();
                rust_str
            }
        }
    }

    /// Sets the currently selected path.
    pub fn set_path(&self, path: &str) {
        let c_path = CString::new(path).expect("CString::new failed for path");
        unsafe {
            ffi::wxd_FilePickerCtrl_SetPath(self.window.as_ptr() as *mut ffi::wxd_FilePickerCtrl_t, c_path.as_ptr());
        }
    }

    /// Creates a FilePickerCtrl from a raw pointer.
    /// # Safety
    /// The pointer must be a valid `wxd_FilePickerCtrl_t`.
    unsafe fn from_ptr(ptr: *mut ffi::wxd_FilePickerCtrl_t) -> Self {
        FilePickerCtrl {
            window: Window::from_ptr(ptr as *mut ffi::wxd_Window_t),
        }
    }
}

impl WxWidget for FilePickerCtrl {
    fn handle_ptr(&self) -> *mut ffi::wxd_Window_t {
        self.window.handle_ptr()
    }
}

impl WxEvtHandler for FilePickerCtrl {
    unsafe fn get_event_handler_ptr(&self) -> *mut ffi::wxd_EvtHandler_t {
        self.window.get_event_handler_ptr()
    }
}

impl Drop for FilePickerCtrl {
    fn drop(&mut self) {
        // Window struct's Drop (if any, currently none) or parentage handles destruction.
    }
}

// --- FilePickerCtrlBuilder --- 

pub struct FilePickerCtrlBuilder<'a> {
    parent_ptr: *mut ffi::wxd_Window_t,
    id: i32,
    message: String,
    wildcard: String,
    path: String,
    pos: Point,
    size: Size,
    style: i64,
    _phantom: std::marker::PhantomData<&'a ()>,
}

impl<'a> Default for FilePickerCtrlBuilder<'a> {
    fn default() -> Self {
        Self {
            parent_ptr: ptr::null_mut(),
            id: ffi::WXD_ID_ANY as i32,
            message: "Select a file".to_string(),
            wildcard: "*.*".to_string(),
            path: "".to_string(),
            pos: Point::default(),
            size: Size::default(),
            style: FLP_DEFAULT_STYLE,
            _phantom: std::marker::PhantomData,
        }
    }
}

impl<'a> FilePickerCtrlBuilder<'a> {
    // parent_ptr is set by FilePickerCtrl::builder
    
    pub fn with_id(mut self, id: i32) -> Self {
        self.id = id;
        self
    }

    pub fn with_message(mut self, message: &str) -> Self {
        self.message = message.to_string();
        self
    }

    pub fn with_wildcard(mut self, wildcard: &str) -> Self {
        self.wildcard = wildcard.to_string();
        self
    }

    pub fn with_path(mut self, path: &str) -> Self {
        self.path = path.to_string();
        self
    }

    pub fn with_pos(mut self, pos: Point) -> Self {
        self.pos = pos;
        self
    }

    pub fn with_size(mut self, size: Size) -> Self {
        self.size = size;
        self
    }

    pub fn with_style(mut self, style: i64) -> Self {
        self.style = style;
        self
    }

    pub fn build(self) -> FilePickerCtrl {
        assert!(
            !self.parent_ptr.is_null(),
            "FilePickerCtrl requires a parent"
        );

        let c_message = CString::new(self.message).expect("CString::new failed for message");
        let c_wildcard = CString::new(self.wildcard).expect("CString::new failed for wildcard");
        let c_path = CString::new(self.path).expect("CString::new failed for path");

        let ffi_pos: ffi::wxd_Point = self.pos.into();
        let ffi_size: ffi::wxd_Size = self.size.into();

        let ptr = unsafe {
            ffi::wxd_FilePickerCtrl_Create(
                self.parent_ptr,
                self.id,
                c_message.as_ptr(),
                c_wildcard.as_ptr(),
                c_path.as_ptr(),
                ffi_pos,
                ffi_size,
                self.style as c_long,
            )
        };
        if ptr.is_null() {
            panic!("Failed to create FilePickerCtrl: FFI returned null pointer.");
        } else {
            unsafe { FilePickerCtrl::from_ptr(ptr) }
        }
    }
} 