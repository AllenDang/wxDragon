# Changelog

## 0.8.1

### New Features
- **Comprehensive Cursor API**: Added complete cursor management system with full wxWidgets 3.3.0 feature parity
  - 28 stock cursor types: Arrow, Hand, Cross, Wait, IBeam, Magnifier, sizing cursors, and more
  - Multiple cursor creation methods: stock cursors, file loading, bitmap conversion, raw data
  - Global cursor management with set_cursor() and busy cursor with nesting support
  - RAII BusyCursor wrapper for automatic cleanup and exception safety
  - Platform-aware implementation supporting macOS, Windows, and Linux
  - Cursor properties API: hotspot access, validity checking, native handle access
  - Per-window cursor management: set/get cursor for individual windows
  - Complete memory safety with proper Drop implementation and error handling

- **Dark Mode Support**: Added comprehensive dark mode support with wxWidgets 3.3.0+ appearance API
  - System appearance detection: detect if system is using dark/light mode
  - Application appearance control: set app to Light, Dark, or System mode
  - Cross-platform support: full macOS support, Windows 10 v2004+ dark theme support, basic Linux support
  - SystemAppearance API with platform-specific appearance name access (e.g., NSAppearanceNameDarkAqua)
  - Thread-safe implementation with Send + Sync traits for async applications
  - Conditional compilation with wxCHECK_VERSION guards for compatibility

- **Enhanced Window Management**: Extended window functionality for modern UI development
  - Z-order management: raise() and lower() methods for window layering
  - Mouse capture: capture_mouse() and release_mouse() for advanced input handling
  - Text measurement: get_text_extent() for precise UI layout calculations
  - Integrated cursor management per window instance

### Enhancements
- **Cross-Platform Enum Compatibility**: Comprehensive enum type system improvements
  - Fixed enum discriminant type compatibility across Linux/macOS (isize) and Windows (i32)
  - Replaced platform-specific explicit discriminant values with automatic assignment
  - Enhanced From implementations with explicit pattern matching for FFI constant mapping
  - Improved type safety with proper #[repr(C)] usage for C ABI compatibility
  - Consistent FFI constant usage following established patterns

- **FFI Layer Enhancements**: Expanded C++ binding layer for new functionality
  - Added comprehensive cursor FFI with 16 exported functions
  - Added appearance API with platform-aware conditional compilation
  - Enhanced window management FFI with z-order and mouse capture functions
  - Improved enum constant generation and usage patterns

### Bug Fixes
- **Windows Build Compatibility**: Resolved platform-specific build issues
  - Fixed Windows cursor constructor compatibility (C2661 compilation errors)
  - Corrected platform-specific cursor creation for Windows vs GTK/other platforms
  - Windows: Use wxImage-based cursor creation with hotspot options
  - GTK: Use raw bits constructor with proper foreground/background color parameters
  - Fixed cross-platform enum type mismatches in FFI layer

- **Code Quality**: Addressed clippy warnings and improved code standards
  - Fixed needless_borrows_for_generic_args warnings in build script
  - Removed unnecessary reference operators in function calls
  - Improved build script efficiency and clarity

### Examples
- **dark_mode_demo**: New comprehensive example demonstrating dark mode functionality
  - System appearance detection and dark mode checking
  - Application appearance mode switching (Light, Dark, System)
  - Platform-specific appearance information display
  - Demonstrates wxWidgets appearance limitations and best practices

- **window_features_test**: Enhanced example showcasing cursor and window management
  - Comprehensive cursor API demonstration with all 28 stock cursor types
  - Window management features: z-order control, mouse capture, text measurement
  - RAII BusyCursor usage patterns and cursor property access
  - Interactive UI for testing all cursor and window features

### Platform Support
- Enhanced cross-platform compatibility for all supported platforms:
  - ✅ **Linux**: Fixed enum type compatibility, cursor constructor issues
  - ✅ **macOS**: Full dark mode support, comprehensive cursor API
  - ✅ **Windows MSVC**: Fixed cursor constructor C2661 errors, enum type issues
  - ✅ **Windows MinGW**: Cross-platform enum compatibility, cursor creation fixes

### API Changes
- Added new modules: `cursor`, `appearance` with comprehensive APIs
- Enhanced `window` module with cursor management, z-order, and mouse capture
- Extended `app` module with appearance control functionality
- All new APIs follow wxDragon's established patterns for memory safety and error handling

## 0.8.0

### New Features
- **Pre-built wxWidgets Library Integration**: Major build system enhancement with pre-built wxWidgets libraries
  - Reduced build times from 20-30 minutes to seconds (99%+ improvement)
  - macOS debug/release builds: ~5 seconds
  - Windows cross-compilation: ~17 seconds 
  - Automatic download of pre-built libraries from GitHub releases
  - Support for both debug and release configurations
  - Maintains full functionality with pre-built libraries

### Enhancements
- **Cross-Platform Build System**: Comprehensive build system improvements for all platforms
  - Enhanced Windows MSVC build support with proper Visual Studio integration
  - Improved MSYS2/MinGW64 build compatibility with static linking
  - Fixed cross-compilation from macOS to Windows
  - Unified library naming conventions and paths across platforms
  - Complete static linking support for Windows builds with dependency-free executables
- **CI/CD Improvements**: Extensive GitHub Actions workflow enhancements
  - Automated pre-built wxWidgets library generation for all platforms
  - Support for both debug and release library builds
  - Improved artifact packaging and distribution
  - Enhanced build diagnostics and error reporting

### Bug Fixes
- **Windows Build Fixes**: Resolved multiple Windows-specific build issues
  - Fixed MSVC setup.h include path issues and Unicode definitions
  - Resolved library placement and organization for Windows builds
  - Fixed cmake path detection for cross-platform CI compatibility
  - Corrected MSVC runtime linking based on build profile
- **Static Linking**: Complete static linking implementation for Windows
  - Resolved C++ standard library linking conflicts in MSYS2/MinGW64
  - Fixed missing std::basic_streambuf symbols
  - Added comprehensive static linking flags for all C++ runtime libraries

## 0.7.1

### New Features
- **GenericStaticBitmap Widget**: Added GenericStaticBitmap widget for enhanced cross-platform compatibility
  - Platform-aware StaticBitmap handling in XRC files
  - Automatic use of wxGenericStaticBitmap on Windows for better rendering consistency
  - Native wxStaticBitmap on other platforms for optimal performance
  - Seamless integration with existing StaticBitmap API

### Enhancements
- **Platform-Aware XRC Handling**: Enhanced XRC system with platform-specific widget selection
  - Intelligent StaticBitmap implementation selection based on target platform
  - Improved cross-platform rendering consistency
  - Better support for complex UI layouts across different operating systems

### Bug Fixes
- **Windows Build**: Fixed Windows build compatibility issues
- **XRC Integration**: Resolved StaticBitmap rendering issues in XRC-loaded interfaces

## 0.7.0

### New Features
- **Enhanced Build System**: Initial groundwork for pre-built library support
- **Cross-Platform Improvements**: Better support for Windows and cross-compilation scenarios

## 0.6.8

### New Features
- **Bitmap RGBA Data Extraction**: Added `get_rgba_data()` method to `Bitmap` for seamless integration with Rust image processing libraries
  - Extracts raw RGBA pixel data as `Vec<u8>` with 4 bytes per pixel (R, G, B, A)
  - Data is ordered row by row from top to bottom, left to right within each row
  - Handles both alpha and non-alpha bitmaps (non-alpha defaults to fully opaque)
  - Perfect for integration with the `image` crate: `image::RgbaImage::from_raw(width, height, rgba_data)`
  - Added comprehensive documentation with usage examples
  - Includes proper memory management with C++ allocated data cleanup

### Enhancements
- **FFI Layer**: Added `wxd_Bitmap_GetRGBAData()` and `wxd_Bitmap_FreeRGBAData()` C++ functions
  - Utilizes wxWidgets' `ConvertToImage()` and pixel data extraction APIs
  - Safe memory allocation and deallocation patterns
  - Proper alpha channel handling for all bitmap types

### Bug Fixes
- **MediaCtrl SeekMode**: Fixed clippy warning by using `#[derive(Default)]` instead of manual implementation

## 0.6.7

### Enhancements
- **WxWidget Trait**: Added `get_parent()` method to `WxWidget` trait for accessing parent windows
  - Returns `Option<Window>` - `Some(Window)` if widget has a parent, `None` for top-level windows
  - Enables child widgets to trigger refresh and layout updates on their parent containers
  - Improves widget update behavior by allowing proper parent notification
- **StaticBitmap Refresh Enhancement**: Enhanced StaticBitmap methods to refresh parent containers
  - Updated `set_scale_mode()`, `set_bitmap()`, and `set_bitmap_bundle()` to refresh parent instead of self
  - Ensures immediate visual updates when bitmap content or scaling changes
  - Eliminates the need to manually resize windows to see changes

## 0.6.6

### New Features
- **StaticBitmap Scale Mode Support**: Added comprehensive scale mode functionality for StaticBitmap widget
  - Added `ScaleMode` enum with variants: `None`, `Fill`, `AspectFit`, and `AspectFill`
  - Added `set_scale_mode()` and `get_scale_mode()` methods to StaticBitmap
  - Added `with_scale_mode()` builder method for convenient scale mode configuration
  - Enhanced StaticBitmap builder to support scale mode initialization
  - Scale modes control how bitmaps are displayed within the control boundaries:
    - `None`: Display bitmap at original size (no scaling)
    - `Fill`: Scale to fill entire control (may change aspect ratio)
    - `AspectFit`: Scale to fit within control while maintaining aspect ratio
    - `AspectFill`: Scale to fill control while maintaining aspect ratio (may crop)

### Enhancements
- **API Exports**: Added `ScaleMode` enum to public API exports in prelude and widgets module
- **FFI Layer**: Extended C++ bindings with `wxd_StaticBitmap_SetScaleMode` and `wxd_StaticBitmap_GetScaleMode` functions
- **Type Safety**: Implemented safe conversion between Rust enum and C++ scale mode constants

## 0.6.5

### Bug Fixes
- **XRC Loading from String**: Fixed critical UTF-8 encoding bug in `wxd_XmlResource_LoadFromString` function
  - Corrected memory stream size calculation to use actual UTF-8 byte length instead of Unicode character count
  - Fixed truncated XRC data when loading XML with non-ASCII characters (e.g., Chinese characters)
  - Resolved "Failed to parse XML document" errors when using wxFormBuilder-generated XRC files
  - **wxDragon is now fully compatible with wxFormBuilder-generated XRC files without requiring manual cleanup**

### Enhancements
- **DataViewCustomRenderer GetSizeCallback**: Enhanced the `GetSizeCallback` signature to receive both the variant value and default cell size as parameters, making it more practical for content-aware sizing
  - The callback now has the signature `Fn(&Variant, Size) -> Size` instead of `Fn() -> Size`
  - Allows renderers to adjust their size based on the actual data content

## 0.6.4

### New Features
- **DataView Custom Renderers**: Added comprehensive custom renderer support for DataView controls
  - Implemented `DataViewCustomRenderer` with full editor functionality
  - Added editor-related APIs for custom DataView rendering with edit capabilities
  - Enhanced DataView widget with custom renderer integration
  - Added `custom_dataview_renderer` example demonstrating custom rendering functionality

### Enhancements
- **Feature Gates**: Added granular feature flags for better build customization
  - Added `webview` feature flag for WebView widget support
  - Added `media-ctrl` feature flag for MediaCtrl widget support  
  - Added `stc` feature flag for StyledTextCtrl widget support
  - Added `xrc` feature flag for XML Resource support
  - Added `aui` feature flag for Advanced User Interface components
  - Updated examples to use appropriate feature flags
- **Build System Improvements**: Enhanced cross-platform build compatibility
  - Fixed build failures across all platforms when enabling HTML with both XRC and WebView features
  - Improved Linux build stability with build script optimizations
  - Enhanced MSVC and MinGW64 build support
  - Better CMake configuration for conditional feature compilation
- **Widget API Enhancements**: Extended widget functionality and API surface
  - Enhanced menu system with additional functionality
  - Improved toolbar and scrolled window implementations
  - Added window-related utility functions

### Bug Fixes
- **Cross-Platform Build**: Fixed critical build issues affecting all platforms
  - Resolved HTML feature conflicts when both XRC and WebView features are enabled
  - Fixed Linux-specific build errors in the build script
  - Improved build stability for MSVC and MinGW64 toolchains
- **DataView Renderer**: Fixed implementation issues in custom DataView rendering
  - Optimized C++ implementation for better performance
  - Improved memory management in custom renderer implementations

### Examples
- **custom_dataview_renderer**: New comprehensive example showcasing custom DataView renderer functionality
  - Demonstrates custom cell rendering and editing capabilities
  - Shows integration with custom data models
  - Includes practical use cases for advanced DataView customization

### Platform Support
- Enhanced cross-platform compatibility for Linux, Windows (MSVC/MinGW64), and macOS
- Improved feature gate system for platform-specific functionality
- Better conditional compilation support across different build environments

## 0.6.2

### Bug Fixes
- **DataView Event System**: Fixed critical issue where `event.get_row()` always returned 0 for custom DataView virtual list models
  - Corrected `wxd_DataViewEvent_GetRow` implementation to use proper wxWidgets 3.2.8 API (`GetModel()` instead of non-existent `GetDataViewCtrl()`)
  - Added support for both `wxDataViewVirtualListModel` and `wxDataViewIndexListModel` row index conversion
  - Enhanced fallback mechanism for other model types with proper manual decoding
  - Fixed compilation errors by using correct wxWidgets API methods
  - Added comprehensive test case in gallery example with double-click row index verification

### Enhancements
- **Prelude Module**: Added `DataViewEventHandler` trait to prelude for easier access to DataView event handling methods
  - Enables direct usage of methods like `on_item_activated()` without explicit trait imports
  - Improves developer experience for DataView event handling

### Examples
- **Gallery Example**: Enhanced DataView Virtual tab with double-click testing functionality
  - Added `on_item_activated` event handler to demonstrate correct row index reporting
  - Includes console output showing employee details for clicked rows
  - Serves as verification for the DataView event fix

## 0.6.1

### New Features
- **Enhanced Idle Event System**: Significantly improved idle event support for better async runtime integration
  - Added `Event::request_more()` and `Event::more_requested()` methods for intelligent idle event control
  - Added `IdleEvent` struct with static methods `set_mode()` and `get_mode()` for global idle mode management
  - Added `IdleMode` enum with `ProcessAll` and `ProcessSpecified` variants for fine-grained control
  - Added `ExtraWindowStyle::ProcessIdle` flag for per-window idle event processing control
  - Enhanced window event handling with proper idle event data structures

### Examples
- **tokio_async_demo**: Added comprehensive example demonstrating async runtime integration
  - Shows recommended patterns for tokio channel communication with GUI
  - Demonstrates efficient idle event usage with `request_more()` for optimal CPU usage
  - Includes counter updates, status messages, and background task coordination
  - Uses `ProcessSpecified` idle mode with per-window control for maximum efficiency

### Enhancements
- **Window API**: Added extra window style management methods to `WxWidget` trait
  - `set_extra_style()`, `get_extra_style_raw()`, `has_extra_style()`
  - `add_extra_style()`, `remove_extra_style()` for fine-grained style control
- **FFI Layer**: Extended C++ binding with new idle event and window style APIs
  - Added idle event control functions in `wxd_event_api.h`
  - Enhanced window base functionality in `wxd_window_base.h`
  - Cross-platform constant generation for idle event modes

### Platform Support
- Enhanced cross-platform idle event constants for GTK, MSW, and OSX
- Improved async integration compatibility across all supported platforms

## 0.6.0

### New Features
- **StyledTextCtrl Widget**: Added comprehensive StyledTextCtrl widget for advanced text editing
  - Full-featured text editor component with syntax highlighting support
  - Extensive API with 1600+ lines of Rust bindings
  - Support for text styling, markers, indicators, and annotations
  - Advanced text manipulation and editor functionality
- **CollapsiblePane Widget**: Added CollapsiblePane widget for expandable/collapsible content areas
  - Configurable expand/collapse behavior
  - Integration with layout system for dynamic UI layouts

### Enhancements
- **Build System Improvements**:
  - Enhanced static linking support from macOS to Windows via GNU toolchain
  - Added Windows manifest embedding for gallery example
  - Improved cross-platform build compatibility

### Bug Fixes
- **Windows Build**: Fixed Windows build by adding missing imm32 library dependency

### Examples
- Added `simple_stc_test` example demonstrating StyledTextCtrl functionality
- Updated gallery example with CollapsiblePane demonstration
- Enhanced custom_widget example documentation with README and GIF demonstration

### Platform Support
- Improved Windows build stability and compatibility
- Enhanced cross-compilation support from macOS to Windows

## 0.5.0

### New Features
- **New Sizer Types**:
  - **WrapSizer**: Wrapping sizer with configurable wrapping behavior
    - `WrapSizerFlag` enum for controlling wrap behavior
  - **GridSizer**: Basic grid layout sizer with configurable rows, columns, and gaps
  - **GridBagSizer**: Advanced grid layout with position and span control
    - `GBPosition` and `GBSpan` types for precise grid positioning
    - Support for item positioning, spanning, and cell size management
    - Empty cell size configuration
- **Enhanced Frame Support**:
  - Added `set_icon` function for Frame widget to set window icons
- **Enhanced Device Context (DC) Module**:
  - Added `AutoBufferedPaintDC` for automatic double buffering
  - Significantly expanded DC functionality with additional drawing methods
  - Enhanced DC constants and type definitions

### Breaking Changes
- **Event System Refactoring**: Major refactor of the event system to allow multiple bindings to one event
  - Improved event handling architecture for better flexibility
  - More robust event binding mechanism
- **API Cleanup**: Cleaned up `lib.rs` and `prelude.rs` for better organization
  - Streamlined imports and exports
  - Improved public API structure

### Enhancements
- **MediaCtrl Feature Flag**: Enhanced conditional compilation for MediaCtrl event handling
  - Better feature flag support for optional components
- **Build System Improvements**:
  - Enhanced CMake configuration
  - Better header isolation between wxWidgets and wrapper headers
  - Improved cross-platform build support

### Examples
- Added `wrapsizer_test` example demonstrating WrapSizer functionality
- Added `gridsizer_test` example showing GridSizer usage  
- Added `gridbagsizer_test` example with advanced GridBagSizer positioning
- Added `custom_widget` example showcasing:
  - `AutoBufferedPaintDC` usage
  - Custom widget implementation with `anim_fill_button.rs`
  - Pie chart widget implementation with `pie_chart.rs`

### Refactoring
- **Event System Architecture**: Complete refactoring to support multiple event bindings
- **DC Module Enhancement**: Expanded drawing capabilities and constants
- **Code Organization**: Better module structure and cleaner API surface

## 0.4.0

### New Features
- Added XRC (XML Resource) support for loading UI definitions from XML files
- Added Clipboard support with full text, file, and bitmap functionality
- Added Timer widget for scheduled events and callbacks
- Added BitmapBundle support for high-DPI displays and multiple image resolutions
- Added RearrangeList widget for reorderable list controls
- Added new dialog widgets:
  - DirDialog for directory selection
  - SingleChoiceDialog for single item selection
  - MultiChoiceDialog for multiple item selection

### Enhancements
- Enhanced Button widget with BitmapBundle support for better image handling
- Enhanced StaticBitmap widget with BitmapBundle support
- Enhanced Toolbar widget with BitmapBundle support for high-DPI icons
- Enhanced ArtProvider with additional functions and capabilities
- Improved cross-compilation support from macOS to Windows

### Refactoring
- Unified file naming conventions across the codebase
- Improved data object architecture for clipboard and drag-and-drop operations
- Enhanced build system for better cross-platform compatibility

### Examples
- Added clipboard_test example demonstrating clipboard functionality
- Added simple_xrc_test example showing XRC usage
- Updated gallery example with new widgets and features

## 0.3.0

### New Features
- Added DataViewCtrl support with various components:
  - DataViewTreeCtrl for hierarchical data display
  - DataViewVirtualListModel for efficient large dataset handling
  - Multiple renderer types (text, toggle, progress, bitmap, etc.)
- Added image support for Button widget
- Added ImageList support for Notebook and TreeCtrl
- Added get_bitmap functionality to StaticBitmap widget
- Added more functions to FileDialog

### Enhancements
- Comprehensive event system refactoring with three-tier approach:
  - Window events common to all widgets
  - Category-specific events for related controls
  - Widget-specific event handlers
- Added type-safe event data via strongly-typed wrappers
- Added event handlers for checkboxes, choice controls, color pickers and more
- Added more DataView-related functions

### Refactoring
- Refactored SizerFlag constants to use enums for better type safety
- Removed all raw pointer constants (*.PTR) in favor of safer alternatives
- Removed libc dependency from wxdragon
- Updated C++ event infrastructure with proper ownership management

### Bug Fixes
- Fixed bitmap issue with DataViewVirtualListModel
- Fixed potential memory leak in variant handling

## 0.2.0

### New Features
- Added MediaPlayer widget for audio/video playback
- Added EditableListBox widget
- Added TimePicker widget
- Added NotificationMessage widget
- Added AnimationCtrl widget
- Added various dialog widgets:
  - MessageDialog
  - FileDialog
  - TextEntryDialog
  - ColourDialog
  - FontDialog
  - ProgressDialog
- Added picker controls:
  - FilePickerCtrl
  - DirPickerCtrl
  - FontPickerCtrl
- Added AUI (Advanced User Interface) components:
  - AuiMdiParentFrame
  - AuiMdiChildFrame
  - AuiNotebook
  - AuiToolbar
- Added Drag and Drop (DnD) support with full callback implementation
- Added Device Context (DC) related APIs
- Added `app::call_after` for scheduling work on the main thread

### Enhancements
- Added more size-related functions to Window
- Added more functions to ListCtrl
- Added more functions and styles to TextCtrl
- Added more colors and font functions
- Enhanced memory management for Bitmap
- Added enable/disable functions to widgets
- Added general set_font capability to all widgets
- Added sizer.detach and widget.destroy methods
- Added TreeItemData support
- Improved FileDataObject with proper get_filenames implementation
- Added general set_font capability to all widgets

### Refactoring
- Refactored TreeCtrl to use unified item_data mechanism
- Refined dialog code for better usability
- Refined ListCtrl implementation
- Applied widget macros to existing widgets for consistent implementation
- Refined constant handling by converting to Rust enums
- Restructured wxdragon.h to use separate modules

### Platform Support
- Added Windows theme support
- Improved cross-compilation from macOS to Windows

### Breaking Changes
- Removed RawWxPtr in favor of a more robust approach

## 0.1.0

- Initial release of wxdragon and wxdragon-sys

