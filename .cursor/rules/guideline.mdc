---
description: general guideline for wxDragon development
globs: 
alwaysApply: false
---
# Guideline for wxDragon Development:

When implementing any new feature (widget, sizer, event, etc.), prioritize safety and consistency across all layers, ensuring a clean separation of concerns and performing incremental build checks:

## Constant Handling:
. **Event Types:**
    . If a new event binding is needed, add a new variant to the `WXDEventTypeCEnum` in [`rust/wxdragon-sys/cpp/include/events/wxd_event_api.h`](mdc:rust/wxdragon-sys/cpp/include/events/wxd_event_api.h) (or a relevant type definition file it includes, assigning a **stable** integer value).
    . Update the `switch` statement in [`rust/wxdragon-sys/cpp/src/event.cpp`](mdc:rust/wxdragon-sys/cpp/src/event.cpp)'s `wxd_EvtHandler_Bind` function to map it to the corresponding `wxEVT_XXX` constant.
    . Add a corresponding constant to the Rust `EventType` enum in [`rust/wxdragon/src/event.rs`](mdc:rust/wxdragon/src/event.rs).
. **Other Constants (Styles, IDs, Flags) - For Maintainers:**
    . Identify needed `wxXXX` constants (e.g., `wxTAB_TRAVERSAL`, `wxLB_SORT`, `wxID_OK`).
    . Add their C++ names (e.g., "wxTAB_TRAVERSAL", "wxLB_SORT") to the `constants_to_extract` vector in `rust/wxdragon-sys/cpp/tools/const_extractor/main.cpp`.
    . **Generation Process (Maintainer Task):**
        1. For each target platform (e.g., Windows, Linux, macOS), build wxWidgets and the `const_extractor` tool for that platform.
        2. Run the compiled `const_extractor` against that platform's wxWidgets build.
        3. Save the output into the corresponding platform-specific file in [`rust/wxdragon-sys/src/generated_constants/`](mdc:rust/wxdragon-sys/src/generated_constants) (e.g., `wx_msw_constants.rs`, `wx_gtk_constants.rs`). These files should generate `pub const WXD_XXX` constants.
        4. Commit these updated pre-generated files to the repository.
    . **Usage in Safe Wrapper:** Use the `WXD_XXX` constants (which will be available via `wxdragon_sys::WXD_XXX` after `build.rs` copies the correct file) in the safe Rust wrapper, typically by defining local constants within the relevant widget module (e.g., `pub const TAB_TRAVERSAL: i64 = wxdragon_sys::WXD_TAB_TRAVERSAL;` in `panel.rs`).
. **Build Check (During Development of Constant Generation):** When modifying `const_extractor` or the generation process, verify constants are generated correctly into the platform-specific files and that `build.rs` copies the correct one to `$OUT_DIR/wx_other_constants.rs` making them accessible via `wxdragon_sys::WXD_XXX`.

## C API Headers (`rust/wxdragon-sys/cpp/include/`):
. The main C header for `bindgen` is [`wxdragon.h`](mdc:rust/wxdragon-sys/cpp/include/wxdragon.h).
. This file primarily acts as an aggregator, including:
    *   [`wxd_types.h`](mdc:rust/wxdragon-sys/cpp/include/wxd_types.h) for all C-compatible type definitions and opaque pointers.
    *   Categorized API headers from subdirectories (e.g., `core/`, `widgets/`, `events/`, `dialogs/`, `sizers/`).
. **Key Categorized Headers:**
    *   [`core/wxd_app.h`](mdc:rust/wxdragon-sys/cpp/include/core/wxd_app.h): Application lifecycle functions (e.g., `wxd_Main`, `wxd_GetApp`) and global utilities (e.g., `wxd_free_string`).
    *   [`core/wxd_window_base.h`](mdc:rust/wxdragon-sys/cpp/include/core/wxd_window_base.h): C API functions for generic `wxWindow` operations (e.g., `wxd_Window_Destroy`, `wxd_Window_Show`, `wxd_Window_SetSizer`, `wxd_Window_GetLabel`, etc.). This is where most general window manipulation functions are declared.
    *   [`events/wxd_event_api.h`](mdc:rust/wxdragon-sys/cpp/include/events/wxd_event_api.h): Event handling related C functions (e.g., `wxd_EvtHandler_Bind`, event data accessors).
    *   Headers for specific widget categories like [`widgets/wxd_controls.h`](mdc:rust/wxdragon-sys/cpp/include/widgets/wxd_controls.h), [`widgets/wxd_choices.h`](mdc:rust/wxdragon-sys/cpp/include/widgets/wxd_choices.h), etc., declare functions for creating and manipulating those specific widgets.
. **String Handling:** Functions returning strings that Rust must manage (e.g., `wxd_Window_GetLabel`) will return a `char*` that needs to be freed by calling `wxd_free_string` (declared in [`core/wxd_app.h`](mdc:rust/wxdragon-sys/cpp/include/core/wxd_app.h)).
. **C++ Implementation Utilities:** For C++ implementation files (`.cpp`), common helper macros and utility function declarations (e.g., for string conversion) are provided by [`../src/wxd_utils.h`](mdc:rust/wxdragon-sys/cpp/src/wxd_utils.h), which is included by `wxdragon.h` within an `#ifdef __cplusplus` block. These are not part of the C API exposed to Rust/bindgen.
. **Build Check:** `cd rust && cargo build` (or `cargo build -p wxdragon-sys`). Ensure `bindgen` can parse [`wxdragon.h`](mdc:rust/wxdragon-sys/cpp/include/wxdragon.h) correctly and `wxdragon-sys` compiles.

## C++ Implementation (`rust/wxdragon-sys/cpp/src/*.cpp`):
. Widget cpp must and only include "../include/wxdragon.h".
. Implement the C functions defined in the header files (e.g., in `core/`, `widgets/`, etc.), creating new `.cpp` files if necessary (e.g., `window.cpp` for functions in `wxd_window_base.h`).
. Translate C calls directly to the corresponding wxWidgets C++ calls, handling type conversions (e.g., using `WXD_STR_TO_WX_STRING_UTF8_NULL_OK` macro from `wxd_utils.h`, or `wxString::FromUTF8` for strings).
    *   **String Handling for FFI:** When converting `const char*` (typically from Rust's `CString`) to `wxString` for labels, page text, etc., prefer `wxString::FromUTF8(input_text ? input_text : "")` or the `WXD_STR_TO_WX_STRING_UTF8_NULL_OK` macro. This explicitly handles UTF-8 and guards against potential null pointers from the FFI boundary.
. Manage wxWidgets object creation (`new`) and initiate destruction (`Destroy()`).
. Perform necessary null checks for FFI pointers (e.g., `self`, `page` parameters).
. **Build Check:** Run `cd rust && cargo build`. This will trigger CMake to compile the C++ code and link the static library. Fix any C++ compilation or linking errors before proceeding.

## Rust Safe Wrapper (`rust/wxdragon/src`):
. Create/update the safe Rust abstractions (structs, methods, builders, enums).
. Encapsulate all `unsafe { ffi::... }` calls within safe public methods.
. Define required constants (`pub const`) locally within the appropriate Rust module, deriving them from `wxdragon_sys` constants.
. Handle Rust string to C string conversions (`CString`). For strings received from the C API (e.g. `char*` from `wxd_Window_GetLabel`), use `CString::from_raw` and ensure `ffi::wxd_free_string` is called when the Rust string is dropped (e.g., by implementing `Drop` for a custom string wrapper or managing it within the method).
. Implement `Drop` where appropriate, considering ownership rules (especially for child vs. top-level widgets, and for resources like `char*` obtained from FFI).
. Use `Result` for fallible operations where appropriate.
. Apply established patterns consistently (e.g., Widget Builder Pattern).
. **Build Check:** Run `cd rust && cargo build`. Fix any Rust compilation errors.

## Example/Usage (`examples/rust/gallery` or similar):
. Update the example code to demonstrate the new feature using the safe Rust wrapper.

Final Check: Run the example using `cd rust && cargo run -p gallery`. Verify the new feature works as expected visually and functionally. Fix any runtime errors or logical issues.

## Guideline for Locating CMake Artifacts in wxDragon Project:
1. Base Path: The CMake build process executed via the `build.rs` script using the `cmake` crate places its output within the directory specified by `Config::out_dir()`. In this project, this is set to `$OUT_DIR/build`.
2. Build Root: The actual root directory within which CMake operates and generates files is `$OUT_DIR/build/build/`.
3. Artifact Location: All CMake-generated artifacts (libraries, executables, configuration files like `setup.h`, `wx-config`) will be located relative to this `$OUT_DIR/build/build/` directory.
    . Libraries (`libwxdragon.a`): Typically found in `$OUT_DIR/build/build/lib/`.
    . Executables (`const_extractor`): Typically found in `$OUT_DIR/build/build/bin/`.
    . Vendored wxWidgets Artifacts (`wx-config`, libraries, `setup.h` include dir): Found within `$OUT_DIR/build/build/vendor/wxWidgets/`. For example: 
        - `wx-config` is at `$OUT_DIR/build/build/vendor/wxWidgets/wx-config`.
        - wxWidgets libraries are in `$OUT_DIR/build/build/vendor/wxWidgets/lib/`.
        - The directory containing the generated `wx/setup.h` needed by `bindgen` is typically found by searching within `$OUT_DIR/build/build/vendor/wxWidgets/lib/wx/include/...` or similar paths generated by the wxWidgets CMake build.
4. Verification: Before modifying `build.rs` due to "file not found" errors related to CMake outputs, explicitly verify the expected path using `$OUT_DIR/build/build/` as the base, referencing the specific example: `$OUT_DIR/build/wxdragon-sys-*/out/build/build/vendor/wxWidgets/wx-config`.
