---
description: 
globs: 
alwaysApply: true
---
# wxDragon Widget Implementation Macros

wxDragon provides several macros to help standardize widget implementations and reduce code duplication. 

## Widget Builder Macro

The `widget_builder!` macro creates a standardized builder pattern implementation for widgets:

```rust
widget_builder!(
    name: MyWidget,
    parent_type: &'a dyn WxWidget,
    style_type: MyWidgetStyle,
    fields: {
        custom_field: String = String::new(),
        another_field: i32 = 0
    },
    build_impl: |slf| {
        MyWidget::new_impl(
            slf.parent.handle_ptr(),
            slf.id,
            &slf.label,
            slf.pos,
            slf.size,
            slf.custom_field,
            slf.another_field,
            slf.style.bits(),
        )
    }
)
```

This generates:
- A `MyWidgetBuilder` struct with predefined fields (parent, id, label, pos, size, style) and your custom fields
- Standard `with_X` methods for each field
- A `build()` method that calls your implementation function

## Widget Traits Implementation Macro

The `implement_widget_traits!` macro adds standard trait implementations for widgets:

```rust
implement_widget_traits!(MyWidget, window)
```

This generates implementations for:
- `WxWidget` trait (handle_ptr)
- `Deref`/`DerefMut` to Window
- `WxEvtHandler` trait
- An empty `Drop` implementation (since child widgets are managed by parents)

## Widget Style Enum Macro

The `widget_style_enum!` macro provides a standardized way to define style enums for widgets:

```rust
widget_style_enum!(
    name: MyWidgetStyle,
    doc: "Style flags for MyWidget widget.",
    variants: {
        Default: 0, "Default style with no special behavior.",
        SpecialFlag: ffi::WXD_SPECIAL_FLAG, "Enables special behavior for this widget.",
        AnotherFlag: ffi::WXD_ANOTHER_FLAG, "Another style option for the widget."
    },
    default_variant: Default
)
```

This generates:
- A properly documented enum with all your variants
- A `bits()` method to convert enum values to raw integers
- `Default` trait implementation
- `BitOr`/`BitOrAssign` trait implementations for combining flags

## Important Notes

1. All widgets must have a parent. Use a non-optional parent parameter in your builders.
2. For string parameters (like labels, values), use `&str` in your API and call `.to_string()` internally.
3. When using the builder in wxDragon code, convert string literals to String with `.to_string()`:
   ```rust
   let widget = MyWidget::builder(&parent)
       .with_label("My Label")             // No .to_string() needed - handled by macro
       .with_value("Custom Value".to_string()) // Need .to_string() for custom string fields
       .build();
   ```

By using these macros consistently, wxDragon maintains a uniform API style across all widgets, reducing code duplication and improving maintainability.