name: Build wxWidgets Libraries

on:
  workflow_dispatch:
    inputs:
      wx_version:
        description: 'wxWidgets version to build'
        required: true
        default: '3.3.0'
        type: string
      force_rebuild:
        description: 'Force rebuild even if release exists'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wxwidgets:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            artifact: wxwidgets-linux-x64
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y libgtk-3-dev libpng-dev libjpeg-dev libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev libexpat1-dev libtiff-dev build-essential cmake
            
          - os: macos-latest  
            target: macos-x64
            artifact: wxwidgets-macos-x64
            setup_script: |
              # macOS has most dependencies built-in
              brew install cmake
            
          - os: windows-latest
            target: windows-msvc-x64
            artifact: wxwidgets-windows-msvc-x64
            toolchain: msvc
            setup_script: |
              # Install Ninja for faster builds
              choco install ninja
            
          - os: windows-latest
            target: windows-gnu-x64
            artifact: wxwidgets-windows-gnu-x64
            toolchain: mingw64
            setup_script: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup MinGW64 (Windows GNU only)
        if: matrix.toolchain == 'mingw64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-cc mingw-w64-x86_64-cmake mingw-w64-x86_64-make mingw-w64-x86_64-ninja mingw-w64-x86_64-clang

      - name: Install platform dependencies
        if: matrix.setup_script != ''
        run: ${{ matrix.setup_script }}
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Check if release already exists
        if: ${{ !inputs.force_rebuild }}
        id: check_release
        run: |
          RELEASE_TAG="wxwidgets-${{ inputs.wx_version }}"
          echo "Checking for existing release: $RELEASE_TAG"
          
          # Check if release exists and has our artifact
          RELEASE_EXISTS=$(gh release view "$RELEASE_TAG" --json assets --jq '.assets[] | select(.name=="${{ matrix.artifact }}.tar.gz") | .name' 2>/dev/null || echo "")
          
          if [ -n "$RELEASE_EXISTS" ]; then
            echo "Release $RELEASE_TAG already has ${{ matrix.artifact }}.tar.gz"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "Need to build ${{ matrix.artifact }}.tar.gz for release $RELEASE_TAG"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Download wxWidgets source
        if: steps.check_release.outputs.skip_build != 'true'
        run: |
          WX_VERSION="${{ inputs.wx_version }}"
          WX_TARBALL="wxWidgets-${WX_VERSION}.tar.bz2"
          WX_URL="https://github.com/wxWidgets/wxWidgets/releases/download/v${WX_VERSION}/${WX_TARBALL}"
          
          echo "Downloading wxWidgets ${WX_VERSION} from ${WX_URL}"
          curl -L -o "${WX_TARBALL}" "${WX_URL}"
          
          echo "Extracting ${WX_TARBALL}"
          tar -xjf "${WX_TARBALL}"
          
          echo "WX_SOURCE_DIR=wxWidgets-${WX_VERSION}" >> $GITHUB_ENV
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Configure wxWidgets build
        if: steps.check_release.outputs.skip_build != 'true'
        run: |
          mkdir -p build
          cd build
          
          # Configure wxWidgets with all features enabled for static linking
          CMAKE_ARGS=(
            -DCMAKE_BUILD_TYPE=Release
            -DwxBUILD_SHARED=OFF
            -DwxBUILD_SAMPLES=OFF
            -DwxBUILD_TESTS=OFF
            -DwxBUILD_DEMOS=OFF
            -DwxBUILD_BENCHMARKS=OFF
            -DwxUSE_EXCEPTIONS=ON
            -DwxUSE_GUI=ON
            -DwxUSE_OPENGL=ON
            -DwxUSE_HTML=ON
            -DwxUSE_WEBVIEW=ON
            -DwxUSE_MEDIACTRL=ON
            -DwxUSE_STC=ON
            -DwxUSE_XRC=ON
            -DwxUSE_XML=ON
            -DwxUSE_AUI=ON
            -DwxUSE_PROPGRID=ON
            -DwxUSE_LIBWEBP=OFF
          )
          
          # Platform-specific configuration
          case "${{ matrix.target }}" in
            "macos-x64")
              CMAKE_ARGS+=(
                -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13
                -DwxBUILD_TOOLKIT=osx_cocoa
              )
              ;;
            "windows-msvc-x64")
              CMAKE_ARGS+=(
                -G "Ninja"
                -DwxBUILD_TOOLKIT=msw
              )
              ;;
            "windows-gnu-x64")
              CMAKE_ARGS+=(
                -G "Ninja"
                -DwxBUILD_TOOLKIT=msw
              )
              ;;
            "linux-x64")
              CMAKE_ARGS+=(
                -DwxBUILD_TOOLKIT=gtk3
              )
              ;;
          esac
          
          echo "Configuring with: cmake ${CMAKE_ARGS[@]} ../${WX_SOURCE_DIR}"
          cmake "${CMAKE_ARGS[@]}" "../${WX_SOURCE_DIR}"
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Build wxWidgets
        if: steps.check_release.outputs.skip_build != 'true'
        run: |
          cd build
          
          # Build with all available CPU cores
          NPROC=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          echo "Building with ${NPROC} parallel jobs"
          
          cmake --build . --config Release --parallel ${NPROC}
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Build wxDragon wrapper library
        if: steps.check_release.outputs.skip_build != 'true'
        run: |
          # Build the wxDragon wrapper library that links against wxWidgets
          mkdir -p wxdragon_build
          cd wxdragon_build
          
          CMAKE_ARGS=(
            -DCMAKE_BUILD_TYPE=Release
            -DWXWIDGETS_SOURCE_DIR="${GITHUB_WORKSPACE}/${WX_SOURCE_DIR}"
          )
          
          # Platform-specific configuration for wxDragon wrapper
          case "${{ matrix.target }}" in
            "windows-msvc-x64")
              CMAKE_ARGS+=(-G "Ninja")
              ;;
            "windows-gnu-x64")
              CMAKE_ARGS+=(-G "Ninja")
              ;;
          esac
          
          echo "Configuring wxDragon wrapper with: cmake ${CMAKE_ARGS[@]} ../rust/wxdragon-sys/cpp"
          cmake "${CMAKE_ARGS[@]}" "../rust/wxdragon-sys/cpp"
          
          # Build with all available CPU cores
          NPROC=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          echo "Building wxDragon wrapper with ${NPROC} parallel jobs"
          cmake --build . --config Release --parallel ${NPROC}
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Package libraries
        if: steps.check_release.outputs.skip_build != 'true'
        run: |
          # Create packaging directory
          mkdir -p "dist/${{ matrix.artifact }}"
          
          # Copy wxWidgets libraries
          if [ -d "build/lib" ]; then
            cp -r build/lib/* "dist/${{ matrix.artifact }}/"
          fi
          
          # Copy wxDragon wrapper library
          if [ -d "wxdragon_build/lib" ]; then
            cp -r wxdragon_build/lib/* "dist/${{ matrix.artifact }}/"
          fi
          
          # Copy additional platform-specific library directories
          case "${{ matrix.target }}" in
            "windows-"*)
              # Windows may have libraries in subdirectories
              if [ -d "build/lib/vc_x64_lib" ]; then
                cp -r build/lib/vc_x64_lib/* "dist/${{ matrix.artifact }}/"
              fi
              if [ -d "build/lib/gcc_x64_lib" ]; then
                cp -r build/lib/gcc_x64_lib/* "dist/${{ matrix.artifact }}/"
              fi
              ;;
          esac
          
          # Create version info file
          echo "wxWidgets Version: ${{ inputs.wx_version }}" > "dist/${{ matrix.artifact }}/VERSION.txt"
          echo "Build Target: ${{ matrix.target }}" >> "dist/${{ matrix.artifact }}/VERSION.txt"
          echo "Build Date: $(date -u)" >> "dist/${{ matrix.artifact }}/VERSION.txt"
          echo "Build OS: ${{ matrix.os }}" >> "dist/${{ matrix.artifact }}/VERSION.txt"
          echo "Includes wxDragon wrapper: libwxdragon.a" >> "dist/${{ matrix.artifact }}/VERSION.txt"
          
          # List contents for debugging
          echo "Packaged libraries:"
          find "dist/${{ matrix.artifact }}" -name "*.a" -o -name "*.lib" | head -20
          
          # Create tarball
          cd dist
          tar -czf "${{ matrix.artifact }}.tar.gz" "${{ matrix.artifact }}/"
          
          # Verify tarball
          echo "Created tarball: $(ls -lh ${{ matrix.artifact }}.tar.gz)"
        shell: ${{ matrix.toolchain == 'mingw64' && 'msys2 {0}' || 'bash' }}

      - name: Upload artifact for review
        if: steps.check_release.outputs.skip_build != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}.tar.gz
          retention-days: 7

  create-release:
    needs: build-wxwidgets
    runs-on: ubuntu-latest
    if: always() && (needs.build-wxwidgets.result == 'success' || needs.build-wxwidgets.result == 'skipped')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create or update release
        run: |
          RELEASE_TAG="wxwidgets-${{ inputs.wx_version }}"
          
          # Check if release exists
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists, updating with new artifacts"
          else
            echo "Creating new release $RELEASE_TAG"
            
            # Create release notes
            cat > release_notes.md << 'EOF'
          Pre-built static libraries for wxWidgets ${{ inputs.wx_version }} across all supported platforms.

          ## Included Platforms
          - Linux x64 (GTK3)
          - macOS x64 (Cocoa) 
          - Windows x64 (MSVC)
          - Windows x64 (MinGW64)

          ## Features Enabled
          All libraries include support for:
          - AUI (Advanced User Interface)
          - Media Control
          - WebView
          - Styled Text Control (STC)
          - XML Resources (XRC)
          - OpenGL
          - Property Grid

          ## Usage
          These libraries are automatically downloaded by wxDragon's build script. Manual usage is not typically needed.
          EOF
            
            gh release create "$RELEASE_TAG" \
              --title "wxWidgets ${{ inputs.wx_version }} Pre-built Libraries" \
              --notes-file release_notes.md
          fi
          
          # Upload all new artifacts
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              for tarball in "$artifact_dir"*.tar.gz; do
                if [ -f "$tarball" ]; then
                  echo "Uploading $(basename "$tarball")"
                  gh release upload "$RELEASE_TAG" "$tarball" --clobber
                fi
              done
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 