/* This is a new file */
//! Safe wrapper for wxDirPickerCtrl.

use crate::base::{Point, Size};
use crate::event::WxEvtHandler;
use crate::window::Window;
use crate::WxWidget;
use std::ffi::{c_long, CString};
use std::ptr;
use wxdragon_sys as ffi;
use std::ops::{BitOr, BitOrAssign};
use std::default::Default;

// --- Constants for wxDirPickerCtrl ---
// These constants are typically defined in wx/filepicker.h for wxDirPickerCtrl
// For now, assuming they will be generated by const_extractor and available via wxdragon_sys
// e.g., ffi::WXD_DIRP_DEFAULT_STYLE, etc.
// Manually defining placeholder values or assuming ffi module will have them.

/// Window style flags for `DirPickerCtrl`.
///
/// These flags can be combined using the bitwise OR operator (`|`).
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(i64)]
pub enum DirPickerCtrlStyle {
    /// Default style, often includes `UseTextCtrl`.
    Default = ffi::WXD_DIRP_DEFAULT_STYLE,
    /// The directory must exist.
    DirMustExist = ffi::WXD_DIRP_DIR_MUST_EXIST,
    /// Change the current working directory when a directory is selected.
    ChangeDir = ffi::WXD_DIRP_CHANGE_DIR,
    /// Use a text control to display the selected directory.
    UseTextCtrl = ffi::WXD_DIRP_USE_TEXTCTRL,
    // Small = ffi::WXD_DIRP_SMALL, // If WXD_DIRP_SMALL is generated
}

impl DirPickerCtrlStyle {
    /// Returns the raw integer value of the style.
    pub fn bits(self) -> i64 {
        self as i64
    }

    /// The default style for `DirPickerCtrl`.
    pub const DEFAULT: DirPickerCtrlStyle = DirPickerCtrlStyle::Default;
}

impl Default for DirPickerCtrlStyle {
    fn default() -> Self {
        DirPickerCtrlStyle::DEFAULT
    }
}

impl BitOr for DirPickerCtrlStyle {
    type Output = Self;

    fn bitor(self, rhs: Self) -> Self::Output {
        unsafe { std::mem::transmute(self.bits() | rhs.bits()) }
    }
}

impl BitOrAssign for DirPickerCtrlStyle {
    fn bitor_assign(&mut self, rhs: Self) {
        unsafe {
            *self = std::mem::transmute(self.bits() | rhs.bits());
        }
    }
}

// --- DirPickerCtrl ---

#[derive(Clone)]
pub struct DirPickerCtrl {
    window: Window, // Embed Window
}

impl DirPickerCtrl {
    /// Creates a new DirPickerCtrlBuilder.
    pub fn builder<'a>(parent: &'a impl WxWidget) -> DirPickerCtrlBuilder<'a> {
        let mut builder = DirPickerCtrlBuilder::default();
        builder.parent_ptr = parent.handle_ptr();
        builder
    }

    /// Gets the currently selected path.
    pub fn get_path(&self) -> String {
        unsafe {
            let c_str = ffi::wxd_DirPickerCtrl_GetPath(
                self.window.as_ptr() as *mut ffi::wxd_DirPickerCtrl_t
            );
            if c_str.is_null() {
                String::new()
            } else {
                // CString::from_raw takes ownership and will free the memory when dropped.
                let rust_str = CString::from_raw(c_str as *mut _)
                    .to_string_lossy()
                    .into_owned();
                rust_str
            }
        }
    }

    /// Sets the currently selected path.
    pub fn set_path(&self, path: &str) {
        let c_path = CString::new(path).expect("CString::new failed for path");
        unsafe {
            ffi::wxd_DirPickerCtrl_SetPath(
                self.window.as_ptr() as *mut ffi::wxd_DirPickerCtrl_t,
                c_path.as_ptr(),
            );
        }
    }

    /// Creates a DirPickerCtrl from a raw pointer.
    /// # Safety
    /// The pointer must be a valid `wxd_DirPickerCtrl_t`.
    unsafe fn from_ptr(ptr: *mut ffi::wxd_DirPickerCtrl_t) -> Self {
        DirPickerCtrl {
            window: Window::from_ptr(ptr as *mut ffi::wxd_Window_t),
        }
    }
}

impl WxWidget for DirPickerCtrl {
    fn handle_ptr(&self) -> *mut ffi::wxd_Window_t {
        self.window.handle_ptr()
    }
}

impl WxEvtHandler for DirPickerCtrl {
    unsafe fn get_event_handler_ptr(&self) -> *mut ffi::wxd_EvtHandler_t {
        self.window.get_event_handler_ptr()
    }
}

impl Drop for DirPickerCtrl {
    fn drop(&mut self) {
        // Window struct's Drop (if any, currently none) or parentage handles destruction.
    }
}

// --- DirPickerCtrlBuilder ---

pub struct DirPickerCtrlBuilder<'a> {
    parent_ptr: *mut ffi::wxd_Window_t,
    id: i32,
    message: String, // Message for the directory selection dialog
    path: String,    // Initial path
    pos: Point,
    size: Size,
    style: DirPickerCtrlStyle,
    _phantom: std::marker::PhantomData<&'a ()>,
}

impl<'a> Default for DirPickerCtrlBuilder<'a> {
    fn default() -> Self {
        Self {
            parent_ptr: ptr::null_mut(),
            id: ffi::WXD_ID_ANY as i32,
            message: "Select a directory".to_string(), // Default message
            path: "".to_string(),
            pos: Point::default(),
            size: Size::default(),
            style: DirPickerCtrlStyle::DEFAULT,
            _phantom: std::marker::PhantomData,
        }
    }
}

impl<'a> DirPickerCtrlBuilder<'a> {
    // parent_ptr is set by DirPickerCtrl::builder

    pub fn with_id(mut self, id: i32) -> Self {
        self.id = id;
        self
    }

    /// Sets the message shown in the directory selection dialog.
    pub fn with_message(mut self, message: &str) -> Self {
        self.message = message.to_string();
        self
    }

    /// Sets the initial path for the picker.
    pub fn with_path(mut self, path: &str) -> Self {
        self.path = path.to_string();
        self
    }

    pub fn with_pos(mut self, pos: Point) -> Self {
        self.pos = pos;
        self
    }

    pub fn with_size(mut self, size: Size) -> Self {
        self.size = size;
        self
    }

    pub fn with_style(mut self, style: DirPickerCtrlStyle) -> Self {
        self.style = style;
        self
    }

    pub fn build(self) -> DirPickerCtrl {
        assert!(
            !self.parent_ptr.is_null(),
            "DirPickerCtrl requires a parent"
        );

        let c_message = CString::new(self.message).expect("CString::new failed for message");
        let c_path = CString::new(self.path).expect("CString::new failed for path");

        let ffi_pos: ffi::wxd_Point = self.pos.into();
        let ffi_size: ffi::wxd_Size = self.size.into();

        let ptr = unsafe {
            ffi::wxd_DirPickerCtrl_Create(
                self.parent_ptr,
                self.id,
                c_message.as_ptr(),
                c_path.as_ptr(),
                ffi_pos,
                ffi_size,
                self.style.bits() as c_long,
            )
        };
        if ptr.is_null() {
            panic!("Failed to create DirPickerCtrl: FFI returned null pointer.");
        } else {
            unsafe { DirPickerCtrl::from_ptr(ptr) }
        }
    }
}
