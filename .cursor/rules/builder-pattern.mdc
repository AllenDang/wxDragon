---
description: 
globs: 
alwaysApply: true
---
# Widget Pattern Macros in wxDragon

wxDragon implements the Builder pattern for widget creation to provide a clean, fluent API. There are standard macros to reduce boilerplate code.

## Builder Pattern Structure

- Every widget (e.g., `Button`, `Panel`, `BitmapButton`) has an associated `*Builder` struct
- Builders are created via `Widget::builder(parent)` static methods
- Builder methods use the `with_*` naming convention and return `self` for chaining
- The `build()` method consumes the builder and returns the constructed widget

## Widget Builder Macro

The `widget_builder` macro in [`rust/wxdragon/src/macros.rs`](mdc:rust/wxdragon/src/macros.rs) reduces boilerplate for creating builders:

```rust
widget_builder!(
    name: Button,
    parent_type: &'a dyn WxWidget,
    style_type: ButtonStyle,
    fields: {
        // Additional fields beyond the standard ones (id, label, pos, size, style)
    },
    build_impl: |slf| {
        // Implementation of how to build the widget
        let parent_ptr = slf.parent.handle_ptr();
        Button::new_impl(
            parent_ptr,
            slf.id,
            slf.pos,
            slf.size,
            slf.style.bits(),
        )
    }
);
```

The macro automatically generates:
- Builder struct with standard fields (id, position, size, style)
- Constructor that initializes with sensible defaults
- Standard setter methods (with_id, with_pos, with_size, with_style)
- Additional setter methods for custom fields
- Build method that calls the provided implementation

## Widget Trait Implementations Macro

The `implement_widget_traits` macro in [`rust/wxdragon/src/macros.rs`](mdc:rust/wxdragon/src/macros.rs) generates standard trait implementations for widgets:

```rust
implement_widget_traits!(Button, window);
```

This one line replaces all of the following standard implementations:

```rust
impl WxWidget for Button {
    fn handle_ptr(&self) -> *mut ffi::wxd_Window_t {
        self.window.handle_ptr()
    }
}

impl std::ops::Deref for Button {
    type Target = Window;
    fn deref(&self) -> &Self::Target {
        &self.window
    }
}

impl std::ops::DerefMut for Button {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.window
    }
}

impl WxEvtHandler for Button {
    unsafe fn get_event_handler_ptr(&self) -> *mut ffi::wxd_EvtHandler_t {
        self.window.get_event_handler_ptr()
    }
}

impl Drop for Button {
    fn drop(&mut self) {
        // Child widgets are managed by their parent in wxWidgets
    }
}
```

The macro automatically:
- Implements `WxWidget` by delegating to the specified window field
- Implements `Deref` and `DerefMut` to allow using the widget where a `Window` is expected
- Implements `WxEvtHandler` for event binding
- Adds an empty `Drop` implementation for child widgets (parent-managed cleanup)

## Custom Fields

The widget_builder macro handles custom fields with the same type as the field itself:
- For regular types like `String` or `i32`, the generated method takes that type
- For `Option<T>` fields, the generated method takes `Option<T>` (not `&T`)

Example usage in [`rust/wxdragon/src/widgets/bitmapbutton.rs`](mdc:rust/wxdragon/src/widgets/bitmapbutton.rs):

```rust
widget_builder!(
    name: BitmapButton,
    parent_type: &'a dyn WxWidget,
    style_type: BitmapButtonStyle,
    fields: {
        bitmap: Option<Bitmap> = None,
        bitmap_disabled: Option<Bitmap> = None,
        bitmap_focus: Option<Bitmap> = None,
        bitmap_hover: Option<Bitmap> = None,
        name: String = "BitmapButton".to_string()
    },
    build_impl: |slf| {
        // Implementation details
    }
);
```

When using these builder methods with `Option<T>` fields in code, wrap values with `Some()`:

```rust
let button = BitmapButton::builder(parent)
    .with_bitmap(Some(bitmap))
    .build();
```

Another example with string fields in [`rust/wxdragon/src/widgets/bitmapcombobox.rs`](mdc:rust/wxdragon/src/widgets/bitmapcombobox.rs):

```rust
widget_builder!(
    name: BitmapComboBox,
    parent_type: &'a dyn WxWidget,
    style_type: ComboBoxStyle,
    fields: {
        value: String = String::new()
    },
    build_impl: |slf| {
        // Implementation details
    }
);
```

When using these builder methods with `String` fields, you need to provide a String, not a `&str`:

```rust
let combo = BitmapComboBox::builder(parent)
    .with_value("Default Value".to_string())  // Note: to_string() is needed
    .build();
```

## Important Rules

1. **All widgets must have a valid parent**: For proper memory management, wxDragon widgets should always have a valid parent. The wxWidgets C++ side relies on parent-child relationships for memory cleanup, so widgets without parents can cause memory leaks. Never use `Option<&dyn WxWidget>` for parent parameters.

2. **Custom builder implementation considerations**: Some widgets may require a custom builder implementation when they have:
   - Substantially different parameters than the standard ones (id, label, position, size, style)
   - Special initialization requirements
   - Non-standard builder method patterns

3. **Always check parent validity**: Even with a non-optional parent parameter, it's good practice to add an assertion in the build method to verify the parent pointer is not null:

   ```rust
   pub fn build(self) -> MyWidget {
       assert!(!self.parent_ptr.is_null(), "MyWidget requires a parent");
       // Implementation details
   }
   ```
