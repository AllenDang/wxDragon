---
description: 
globs: 
alwaysApply: true
---
# C++ Integer Types for Cross-Platform Compatibility

When implementing C++ code in wxDragon, always use fixed-width integer types from `<cstdint>` instead of platform-dependent types like `long`.

## Problem with `long`

The `long` type has different sizes on different platforms:
- 32 bits (4 bytes) on Windows (even on 64-bit Windows)
- 64 bits (8 bytes) on most Unix-like systems (macOS, Linux)

This difference causes subtle bugs, memory corruptions, and linking errors when cross-compiling between platforms.

## Use Fixed-Width Integer Types

Always use these explicit-width integer types:

| Type | Description | Use Instead Of |
|------|-------------|---------------|
| `int8_t`, `uint8_t` | 8-bit integers | `char`, `unsigned char` |
| `int16_t`, `uint16_t` | 16-bit integers | `short`, `unsigned short` |
| `int32_t`, `uint32_t` | 32-bit integers | `int`, `unsigned int` |
| `int64_t`, `uint64_t` | 64-bit integers | `long`, `long long`, `unsigned long` |

## Examples

```cpp
// BAD: Platform dependent
long valueA = 1000000000000;  // Different size on Windows vs macOS/Linux
unsigned long valueB = 0xFFFFFFFFFF;  // Different behavior across platforms

// GOOD: Consistent across all platforms
int64_t valueA = 1000000000000;  // Always 64 bits
uint64_t valueB = 0xFFFFFFFFFF;  // Always 64 bits
```

Always include the appropriate header:
```cpp
#include <cstdint>  // For fixed-width integer types
```

This is particularly important for:
- FFI boundaries between C++ and Rust
- Serialization/deserialization
- Memory-mapped structures
- Network protocol implementations
