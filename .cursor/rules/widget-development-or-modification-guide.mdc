---
description: Guideline: wxDragon Widget Development and Modification
globs: 
alwaysApply: false
---
**Guideline: wxDragon Widget Development and Modification**

When implementing a new widget wrapper or modifying an existing one in wxDragon, it is **crucial** to consult the underlying wxWidgets C++ source code (specifically version 3.2.8, located in the `reference/wxWidgets-3.2.8` directory of this project). This practice ensures accuracy and avoids incorrect assumptions about behavior, inheritance, and event handling.

**Key Steps & Considerations:**

1.  **Understand Widget Behavior and API from wxWidgets Source:**
    *   **Header Files (`reference/wxWidgets-3.2.8/include/wx/`)**: Start by examining the widget's public header file. This provides the class definition, public methods, and often comments on usage.
    *   **Source Files (`reference/wxWidgets-3.2.8/src/`)**: Dive into the corresponding `.cpp` source file (e.g., `common/`, `msw/`, `gtk/`, `osx/` for platform-specifics). This reveals:
        *   **Internal State Management**: How the widget stores and manages its data (e.g., `m_order` in `wxRearrangeList`).
        *   **Method Implementations**: The actual logic of its public methods. Does it override base class methods? Does it have unique behavior? (e.g., `wxRearrangeList::Check` vs. `wxCheckListBox::Check`).
        *   **Event Table (`wxBEGIN_EVENT_TABLE`)**: Identify which events the widget emits or handles internally (e.g., `EVT_CHECKLISTBOX` in `wxRearrangeList`). This is vital for correct event mapping in Rust.
        *   **Base Classes**: Understand what the widget inherits from. While it inherits an interface, it might have specialized implementations or state that differ from its parent.

2.  **FFI Layer (`wxdragon-sys`):**
    *   **C++ Header (`rust/wxdragon-sys/cpp/include/widgets/wxd_widgetname.h`):**
        *   Define C-compatible FFI functions that accurately reflect the necessary wxWidgets API calls identified from the source code.
        *   Pay close attention to parameter types (especially `const` correctness, pointers, and references) and return types.
        *   If a wxWidgets method modifies the object's state in a way that invalidates or replaces the C++ object pointer (rare, but possible if an operation *must* recreate the object, though we found `wxRearrangeList::Check` does *not* do this), the FFI function *must* return the new pointer, and the Rust wrapper *must* update its stored pointer.
    *   **C++ Implementation (`rust/wxdragon-sys/cpp/src/widgetname.cpp`):**
        *   Implement the FFI functions by calling the corresponding wxWidgets methods.
        *   Perform necessary type casts carefully.
        *   Handle string conversions (UTF-8 from Rust to `wxString` and back) using provided utilities.

3.  **Rust Wrapper (`wxdragon/src/widgets/widgetname.rs`):**
    *   **Struct Definition**: Define the Rust struct, typically holding a `Window` field (which in turn holds the FFI pointer).
    *   **Methods**:
        *   Provide safe Rust methods that call the FFI functions.
        *   Handle any necessary data conversions between Rust types and C types (e.g., `String` to `CString`, `Vec<i32>` to `*const i32` and count).
        *   If an FFI call returns a new object pointer (due to C++ side recreation), the Rust method must take `&mut self` and update its internal pointer (`self.window.0`). (This was relevant for the *incorrect* `wxRearrangeList::Check` FFI design, but not for the *correct* one).
    *   **Event Handling**:
        *   Define a Rust `WidgetEvent` enum for widget-specific events.
        *   Use `implement_widget_local_event_handlers!` (or similar) to map these Rust events to the correct `EventType` enum variants.
        *   Ensure these `EventType` variants are correctly mapped to the actual `wxEVT_XXX` constants in `rust/wxdragon-sys/cpp/src/event.cpp` (both in `get_wx_event_type_for_c_enum` and `wxd_EvtHandler_Bind`), based on what the wxWidgets source code for the widget shows it emitting.

4.  **Constants and Styles:**
    *   Follow the project guidelines for extracting or defining style flags and other constants. If they are standard wxWidgets constants, they should be handled by the `const_extractor` mechanism.

5.  **Builder Pattern:**
    *   Utilize the `widget_builder!` macro for consistent widget construction, unless the widget has highly specialized construction needs not covered by the macro.

6.  **Testing:**
    *   Add examples of the new/modified widget to the gallery or a dedicated example application.
    *   Test all functionalities, especially event handling and methods that interact with the widget's state.
    *   Build and test on all target platforms if possible.

**Why this is Critical:**

*   **Accuracy**: Documentation can sometimes lag or miss nuances. The source code is the ground truth.
*   **Avoiding Assumptions**: Incorrect assumptions about inheritance (e.g., assuming a base class method behaves identically without checking for overrides or specialized internal state) can lead to subtle bugs (as we saw with `wxRearrangeList::Check`).
*   **Correct Event Handling**: Event mapping is a common source of errors. The widget's own event table and method implementations reveal exactly which wxWidgets events are relevant.
*   **Understanding Internal State**: For complex controls, knowing how they manage their state internally is key to designing a correct and robust FFI and Rust wrapper.

By consistently referring back to the `wxWidgets-3.2.8` source code, we can build a more reliable, accurate, and maintainable wxDragon library. Do not rely solely on documentation or assumptions about how a widget *should* work based on its name or its base classes. **Verify with the source.**
